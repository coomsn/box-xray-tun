#!/system/bin/sh
scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})
parent_dir=$(dirname ${scripts_dir})
export PATH="/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin:$PATH:/system/bin"

config_file=${parent_dir}/confs/tun.json
binary=${parent_dir}/binary/sing-box

log() {
  export TZ=Asia/Shanghai
  now=$(date +"[%Y-%m-%d %H:%M:%S]")
  case $1 in
    Info)
      [ -t 1 ] && echo -e "\033[1;32m${now} [Info]: $2\033[0m" || echo "${now} [Info]: $2"
      ;;
    Warn)
      [ -t 1 ] && echo -e "\033[1;33m${now} [Warn]: $2\033[0m" || echo "${now} [Warn]: $2"
      ;;
    Error)
      [ -t 1 ] && echo -e "\033[1;31m${now} [Error]: $2\033[0m" || echo "${now} [Error]: $2"
      ;;
    *)
      [ -t 1 ] && echo -e "\033[1;30m${now} [$1]: $2\033[0m" || echo "${now} [$1]: $2"
      ;;
  esac
}

disable_ipv6() {
  echo 0 > /proc/sys/net/ipv6/conf/all/accept_ra
  echo 0 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
  echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
  echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6
  echo 1 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
  log Info "ipv6: disable" >> "${scripts_dir}/run.log"
} 

enable_ipv6() {
  echo 1 > /proc/sys/net/ipv6/conf/all/accept_ra
  echo 1 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
  echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6
  echo 0 > /proc/sys/net/ipv6/conf/default/disable_ipv6
  echo 0 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
  log Info "ipv6: enable" >> "${scripts_dir}/run.log"
} 

tun_index_device() {
local max_retries=5
local retry_count=0
local tun_table_index=""
if [ ! -f "${scripts_dir}/tables.tmp" ]; then
tun_device=$(awk -F'"' '/"interface_name"/ {print $4}' ${config_file})
  while [ -z "$tun_table_index" ] && [ $retry_count -lt $max_retries ]; do
      tun_table_index=$(ip route show table all | grep -E "default dev ${tun_device} table [0-9]" | head -n 1 | awk '{print $5}')
      if [ -n "$tun_table_index" ]; then
          break
      fi
      sleep 1
      retry_count=$((retry_count + 1))
  done
  echo "${tun_table_index} ${tun_device}" > ${scripts_dir}/tables.tmp
fi
read tun_table_index tun_device < "${scripts_dir}/tables.tmp"
log Info "tun_device: ${tun_device}" >> ${scripts_dir}/run.log
log Info "tun_table_index: $tun_table_index" >> ${scripts_dir}/run.log

local action=$1
ipv4_rules=(
  "iif lo goto 6000 pref 5000"
  "iif ${tun_device} lookup main suppress_prefixlength 0 pref 5010"
  "iif ${tun_device} goto 6000 pref 5020"
  "from 10.0.0.0/8 lookup ${tun_table_index} pref 5030"
  "from 172.16.0.0/12 lookup ${tun_table_index} pref 5040"
  "from 192.168.0.0/16 lookup ${tun_table_index} pref 5050"
  "nop pref 6000"
  "lookup main pref 7000"
  "from all iif ${tun_device} lookup main suppress_prefixlength 0 pref 8000"
)
  for rule in "${ipv4_rules[@]}"; do
    ip -4 rule "${action}" ${rule}
    log Info "ip -4 rule ${action} ${rule}" >> ${scripts_dir}/run.log
  done

ipv6_rules=(
  "iif lo goto 6000 pref 5000"
  "iif ${tun_device} lookup main suppress_prefixlength 0 pref 5010"
  "iif ${tun_device} goto 6000 pref 5020"
  # "from 2001:db8::/32 lookup ${tun_table_index} pref 5030"
  # "from fc00::/7 lookup ${tun_table_index} pref 5040"
  "from fd00::/8 lookup ${tun_table_index} pref 5050"
  "nop pref 6000"
  "lookup main pref 7000"
  "from all iif ${tun_device} lookup main suppress_prefixlength 0 pref 8000"
)
  for rule in "${ipv6_rules[@]}"; do
    ip -6 rule "${action}" ${rule}
    log Info "ip -6 rule ${action} ${rule}" >> ${scripts_dir}/run.log
  done
}

delete_ip_rules() {
  for preff in 5000 5010 5020 5030 5040 5050 6000 7000 8000; do
    ip -4 rule del pref $preff
    ip -6 rule del pref $preff
  done
} > /dev/null 2>&1

iptables_rules() {
local iptables=$1
local action=$2
if [[ "${action}" == "-I" ]]; then
    ${iptables} -N TUN_FORWARD 2>/dev/null
    ${iptables} -F TUN_FORWARD 2>/dev/null
    ${iptables} "${action}" TUN_FORWARD -i "${tun_device}" -j ACCEPT
    ${iptables} "${action}" TUN_FORWARD -o "${tun_device}" -j ACCEPT
    ${iptables} "${action}" FORWARD -j TUN_FORWARD
elif [[ "${action}" == "-D" ]]; then
    ${iptables} "${action}" FORWARD -j TUN_FORWARD
    ${iptables} -F TUN_FORWARD 2>/dev/null
    ${iptables} -X TUN_FORWARD 2>/dev/null
fi
# only for vpn apk
if [[ "${iptables}" == "iptables" ]]; then
  if [[ "${action}" == "-I" ]]; then
    iptables -t nat -N TUN_PREROUTING 2>/dev/null
    iptables -t nat -F TUN_PREROUTING 2>/dev/null
    iptables -t nat -N TUN_POSTROUTING 2>/dev/null
    iptables -t nat -F TUN_POSTROUTING 2>/dev/null
    iptables -t nat "${action}" TUN_PREROUTING -p udp --dport 53 -j DNAT --to-destination 1.1.1.1:53
    iptables -t nat "${action}" TUN_POSTROUTING -o "${tun_device}" -j MASQUERADE
    iptables -t nat "${action}" PREROUTING -j TUN_PREROUTING
    iptables -t nat "${action}" POSTROUTING -j TUN_POSTROUTING
  elif [[ "${action}" == "-D" ]]; then
    iptables -t nat "${action}" PREROUTING -j TUN_PREROUTING
    iptables -t nat "${action}" POSTROUTING -j TUN_POSTROUTING
    iptables -t nat -F TUN_PREROUTING 2>/dev/null
    iptables -t nat -F TUN_POSTROUTING 2>/dev/null
    iptables -t nat -X TUN_PREROUTING 2>/dev/null
    iptables -t nat -X TUN_POSTROUTING 2>/dev/null
  fi
 fi
}

forward() {
local action=$1
if [ "${action}" = "-I" ]; then
  echo 1 > /proc/sys/net/ipv4/ip_forward
  echo 2 > /proc/sys/net/ipv4/conf/default/rp_filter
  echo 2 > /proc/sys/net/ipv4/conf/all/rp_filter
fi
if [ "${action}" = "-I" ]; then
  enable_ipv6
  tun_index_device "add"
elif [ "${action}" = "-D" ]; then
  # disable_ipv6
  tun_index_device "del"
  delete_ip_rules
fi
iptables_rules "iptables" "${action}"
iptables_rules "ip6tables" "${action}"
}

start_tun() {
if pidof "${binary}" >/dev/null 2>&1; then
    log Info "Close existing processes $(pidof ${binary})" 
    stop_tun
fi
  log info "---welcome---" > "${scripts_dir}/run.log"
  chmod +x ${binary}
  chown root:net_admin ${binary}
  nohup ${binary} run -c ${config_file} -D ${parent_dir}/binary/ > /dev/null 2>&1 &
  forward -I
  pid=$(pidof sing-box 2>/dev/null)
  [ -n "${pid}" ] && log Info "create pid: ${pid}" >> "${scripts_dir}/run.log"
  description "✔" "is running."
  log Info "Create a new process $(pidof ${binary})" 
}

stop_tun() {
  pid=$(pidof sing-box 2>/dev/null)
  log info "---goodbye---" > "${scripts_dir}/run.log"
  forward -D
  [ -n "${pid}" ] && log Info "delete pid: ${pid}" >> "${scripts_dir}/run.log"
  kill $pid > /dev/null 2>&1
  description "✘" "was stopped."
  rm -f ${scripts_dir}/tables.tmp
}

# version
version() {
if [ -f "${binary}" ]; then
  version=$(${binary} version | head -n 1 | awk '{print $3}')
fi
}
# description
description() {
  local symbol=$1
  local event=$2
  local network_mode="tun"
  version
  prop_file="/data/adb/modules/box_tun-module/module.prop"
  core_name="${binary##*/}"
  current_time=$(date "+[%m.%d %H:%M]")
  sed -i "/description/c\description=${current_time} ${symbol} ${core_name} ${version} ${network_mode} ${event}" "${prop_file}"
  log Info "${symbol} ${network_mode} ${event}" >> "${scripts_dir}/run.log"
}

# 2024 9 26 1115
