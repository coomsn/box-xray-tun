name: box-xray-tun-v2.1

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - ".github"
      - "README.md"
    tags-ignore:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Get repository name
        id: get_repo_name
        run: echo "REPO_NAME=$(basename $(git rev-parse --show-toplevel))" >> $GITHUB_ENV

      - name: Update update.json
        run: |
          version=$(grep -oP 'version=\K[^ ]+' module.prop)
          versionCode=$(grep -oP 'versionCode=\K[^ ]+' module.prop)

          echo '{
            "version": "'"${version}"'",
            "versionCode": "'"${versionCode}"'",
            "zipUrl": "https://github.com/coomsn/${{ env.REPO_NAME }}/releases/download/'"${version}"'/box-xray-tun-'${version}'.zip",
            "changelog": "https://github.com/coomsn/${{ env.REPO_NAME }}/raw/main/CHANGELOG.md"
          }' > update.json

      - name: Commit and push update.json
        run: |
          git config --local user.name "coomsn"
          git config --local user.email "acstudycn@gmail.com"
          git add update.json
          git commit -m "Update update.json for version $(grep -oP 'version=\K[^ ]+' module.prop)" || true
          git push -f origin main

      - name: Run build.sh
        run: sh build.sh

      - name: Extract version from filename
        id: extract_version
        run: |
          zip_file=$(ls box-xray-tun-v*.zip)
          version=$(echo "$zip_file" | sed -E 's/box-xray-tun-v(.*).zip/v\1/')
          echo "VERSION=${version}" >> $GITHUB_ENV

      - name: Read release notes from CHANGELOG.md
        id: get_release_notes
        run: |
          RELEASE_NOTES=$(cat CHANGELOG.md)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 删除旧的 Release 和 Tag
      - name: Delete existing release and tag
        run: |
          # 获取发布的 release_id (包括草稿)
          release_id=$(gh api -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases \
            | jq '.[] | select(.tag_name == env.VERSION) | .id')

          # 如果找到匹配的 release_id，则删除该 release (无论是否为草稿)
          if [ -n "$release_id" ]; then
            gh api -X DELETE /repos/${{ github.repository }}/releases/$release_id
            echo "Deleted existing release with ID: $release_id"
          else
            echo "No release found for version ${{ env.VERSION }}"
          fi

          # 删除已有的 tag
          if git ls-remote --tags origin | grep -q "refs/tags/${{ env.VERSION }}$"; then
            git push origin :refs/tags/${{ env.VERSION }}
            echo "Deleted existing tag: ${{ env.VERSION }}"
          else
            echo "No tag found for version ${{ env.VERSION }}"
          fi
